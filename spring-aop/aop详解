Aop是什么？
  与OOP(面向对象编程)对比面向切面，传统的OOP开发中的代码逻辑是至上而下的，在这些至上而下的过程中会产生一些横切性的问题，
  这些横切性的问题和我们的主业务逻辑关系不大，会分散在代码的各个地方，造成难以维护，AOP的编程思想就是把业务逻辑和横切的
  问题进行分离，从而达到解耦的目的，使代码的重用性和开发性高更高。
AOP的应用场景
  1、日志记录
  2、权限验证
  3、效率检查
  4、事务管理
SpringAop的底层技术--底层源码(重点看)<详见spring-aop-proxy项目中>

  1、JDK动态代理是基于接口，利用java反射完成对类的动态创建，它底层继承了Proxy，在java中不能多继承，它是单继承，只能实现它的接口。
     @EnableAspectJAutoProxy默认为false，在源码DefaultAopProxyFactory中创建AopProxy时判断了它。
     ★☆在Proxy这个类当中首先实例化一个对象ProxyClassFactory,然后在get方法中调用了apply方法,完成对代理类的创建
        其中最重要的两个方法:
        generateProxyClass通过反射收集字段和属性然后生成字节
        defineClass0 jvm内部完成对上述字节的load

  2、CGLIB代理是基于继承来操作子类的字节码生成代理类  cglib通过类的class对象去操作字节码，
     cglib封装了ASM这个开源框架,对字节码操作,完成对代理类的创建
     主要通过集成目标对象,然后完成重写,再操作字节码
     具体看参考ASM的语法
     ObjenesisCglibAopProxy继承了CglibAopProxy，在CglibAopProxy中的getProxy()方法中调用了Enhancer(增强版)类中引用的ams包下的ClassWriter类中的
     方法和MethodVisitor类中的方法去操作类的类对象，生成字节码。

  代理是编译时期的织入还是运行时期的织入？
    它是运行时期织入的
  代理是初始化时期织入还是获取对象时期的织入？
   在初始化时织入也即在SpringIoc容器里就完成了织入，SpringIoc容器无非就是一个线程安全的Map

springAop和AspectJ的关系？
   历史回顾：springAOP借鉴了AspectJ的编程的风格，Aop是一种编程目标，springAop是spring实现Aop的技术，AspectJ也是实现AOP的一种技术，
           aspectJ是面向切面规范的java实现。
   springAop提供了两种编程风格：
     @AspectJ support： 利用aspect注解
         @Configuration            java代码 官方推荐使用
         @EnableAspectJAutoProxy   //开启切面自动代理
         public class AppConfig {

          }
          @Aspect
          public class YuxinAspect {
              @Pointcut("")//切入点
              public void pointCut(){

                }
             }
       常见的切入点表达式:
         1、任何公共方法的执行:
           execution(public * *(..))
         2、任何名称以set开头的方法的执行：
             execution(* set*(..))
         3、执行AccountService接口定义的任何方法:
             execution(* com.xyz.service.AccountService.*(..))
         4、执行service包中定义的任何方法:
             execution(* com.xyz.service.*.*(..))
         5、在service包或其中一个子包中定义的任何方法的执行:
             execution(* com.xyz.service..*.*(..))
         ★ execution执行的粒度更小，它可以用于明确指定方法返回类型，类名，方法名和参数名与方法相关的信息。

         6、service包中的任何连接点(仅在Spring AOP中执行方法):
             within(com.xyz.service.*)
         7、service包或其子包中的任何连接点(仅在Spring AOP中执行方法):
             within(com.xyz.service..*)
         ★within的执行粒度到包下的类，但是它执行不到方法

         8、代理实现AccountService接口的任何连接点(仅在Spring AOP中执行方法):
         ★proxy模式里有两个重要的术语：proxy class 被spring织入的对象，this是代理对象;target class Before("pointCutExecution()")目标对象
          cglib是基于继承，this可以作用在cglib上，而jdk动态代理是基于接口的，thi不能作用在其上。
             this(com.xyz.service.AccountService)
         9、目标对象实现AccountService接口的任何连接点(仅在Spring AOP中执行方法):
             target(com.xyz.service.AccountService)
         10、任何接受单个参数的连接点(仅在Spring AOP中执行方法)，并且在运行时传递的参数是可序列化的:
         ★匹配指定参数类型和指定参数数量的方法，与包名和类名无关
             args(java.io.Serializable)
             注意，本例中给出的切入点不同于执行(* *(java.io.Serializable))。如果在运行时传递的参数是可序列化的，
             则args版本匹配;如果方法签名声明了一个可序列化类型的参数，则执行版本匹配。
         11、target对象具有@Transactional注释的任何连接点(仅在Spring AOP中执行方法):
             @target(org.springframework.transaction.annotation.Transactional)
         12、目标对象的声明类型具有@Transactional注释的任何连接点(仅在Spring AOP中执行方法):
              @within(org.springframework.transaction.annotation.Transactional)
         13、任何连接点(仅在Spring AOP中执行方法)，其中执行方法具有@Transactional注释:
         ★annotation作用到方法级别上的
              @annotation(org.springframework.transaction.annotation.Transactional)
         14、任何连接点(只在Spring AOP中执行的方法执行)都需要一个参数,而通过的参数的运行时类型有@分类注释:
             @args(com.xyz.security.Classified)
         15、在一个名为tradeService的Spring bean上的任何连接点(仅在Spring AOP中执行方法):
             bean (tradeService)
         16、在具有匹配通配符表达式*Service的名称的Spring bean上的任何连接点(仅在Spring AOP中执行方法):
              bean(*Service)

              ★☆上述所有表达式都有@，比如@Target(注解)
              ★☆上述所有表达式可以混合使用 || && ！

    Schema-based AOP support xml方式实现
       <aop:aspectj-autoproxy/>        xml配置

SpringAop的应用：

   aspect：跨越多个类的关注的模块化。事务管理是企业Java应用程序中横切关注点的一个很好的例子。在Spring AOP中，方面是通过使用常规类
           (基于模式的方法)或使用@Aspect注释的常规类(@AspectJ样式)来实现的。

   PointCut:切入点：匹配连接点的谓词。通知与切入点表达式相关联，并在与切入点匹配的任何连接点上运行(例如，执行具有特定名称的方法)。
            连接点由切入点表达式匹配的概念是AOP的核心，Spring默认使用AspectJ切入点表达式语言。

   join point  切入目标对象的方法-->程序执行过程中的一个点，如方法的执行或异常的处理。在Spring AOP中，连接点总是表示方法执行。

   advice 方面在特定连接点上采取的操作。不同类型的建议包括“前后”、“前后”的建议。(稍后将讨论通知类型。)许多AOP框架，
          包括Spring，将通知建模为拦截器，并维护围绕连接点的拦截器链。

   Introduction: 代表类型声明其他方法或字段。Spring AOP允许您将新的接口(和相应的实现)引入任何被建议的对象。例如，
                 您可以使用一个介绍来让一个bean实现一个IsModified接口，以简化缓存。(介绍在AspectJ社区中称为类型间声明。)

   Target object：:由一个或多个方面提供建议的对象。也称为“被通知对象”。因为Spring AOP是通过使用运行时代理来实现的，
                  所以这个对象总是一个代理对象。

   AOP proxy: 为了实现方面契约(通知方法执行等)而由AOP框架创建的对象。在Spring框架中，AOP代理是JDK动态代理或CGLIB代理。

   Weaving:将方面与其他应用程序类型或对象链接以创建建议的对象。这可以在编译时(例如，使用AspectJ编译器)、加载时或运行时完成。
           与其他纯Java AOP框架一样，Spring AOP在运行时执行编织。

   Spring AOP包括以下类型的通知:
    1、Before advice: 在连接点之前运行但不能阻止执行流继续到连接点的通知(除非它抛出异常)。

    2、After returning advice:建议在连接点正常完成后运行(例如，如果一个方法没有抛出异常而返回)。

    3、After throwing advice: 如果一个方法通过抛出异常退出，则要执行的通知。

    4、After (finally) advice:无论连接点以何种方式退出(正常或异常返回)，都将执行通知。

    5、Around advice: 围绕连接点(如方法调用)的通知。这是最有力的建议。Around通知可以在方法调用之前和之后执行自定义行为。
                      它还负责选择是继续到连接点，还是通过返回它自己的返回值或抛出异常来简化建议的方法执行

 Around advice是最普遍的建议。因为Spring AOP和AspectJ一样，提供了各种各样的通知类型，所以我们建议您使用最不强大的通知类型来实现所需的行为。
 例如，如果只需要用方法的返回值更新缓存，则最好实现after return通知，而不是around通知，尽管around通知可以完成相同的工作。
 使用最特定的通知类型可以提供更简单的编程模型，减少出错的可能性。例如，您不需要在用于around通知的连接点上调用proceed()方法，
 因此，您不可能不调用它。

 所有的通知参数都是静态类型的，这样您就可以使用适当类型的通知参数(例如方法执行返回值的类型)，而不是对象数组。由切入点匹配的连接点的概念是AOP的关键，
 它将AOP与只提供拦截的旧技术区分开来。切入点使通知能够独立于面向对象的层次结构。例如，您可以将提供声明性事务管理的around建议应用于一组跨多个对象的方法
 (例如服务层中的所有业务操作)。

注：advice--->pointCut--->join point